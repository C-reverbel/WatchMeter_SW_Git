
HelloWorld_SAML21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000394  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00000394  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020434  2**0
                  CONTENTS
  3 .bss          00000040  20000434  000007c8  00020434  2**2
                  ALLOC
  4 .stack        00001004  20000474  00000808  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045c  2**0
                  CONTENTS, READONLY
  7 .debug_info   00000bcf  00000000  00000000  000204b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002dc  00000000  00000000  00021084  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000060  00000000  00000000  00021360  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000070  00000000  00000000  000213c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00021430  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001423c  00000000  00000000  00021470  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000015c8  00000000  00000000  000356ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0007eb80  00000000  00000000  00036c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000250  00000000  00000000  000b57f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	78 14 00 20 19 01 00 00 15 01 00 00 15 01 00 00     x.. ............
	...
  2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
  3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  8c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000434 	.word	0x20000434
  d4:	00000000 	.word	0x00000000
  d8:	00000394 	.word	0x00000394

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000438 	.word	0x20000438
 108:	00000394 	.word	0x00000394
 10c:	00000394 	.word	0x00000394
 110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
 118:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
 11a:	4a1a      	ldr	r2, [pc, #104]	; (184 <Reset_Handler+0x6c>)
 11c:	4b1a      	ldr	r3, [pc, #104]	; (188 <Reset_Handler+0x70>)
 11e:	429a      	cmp	r2, r3
 120:	d011      	beq.n	146 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 122:	001a      	movs	r2, r3
 124:	4b19      	ldr	r3, [pc, #100]	; (18c <Reset_Handler+0x74>)
 126:	429a      	cmp	r2, r3
 128:	d20d      	bcs.n	146 <Reset_Handler+0x2e>
 12a:	4a19      	ldr	r2, [pc, #100]	; (190 <Reset_Handler+0x78>)
 12c:	3303      	adds	r3, #3
 12e:	1a9b      	subs	r3, r3, r2
 130:	089b      	lsrs	r3, r3, #2
 132:	3301      	adds	r3, #1
 134:	009b      	lsls	r3, r3, #2
 136:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 138:	4813      	ldr	r0, [pc, #76]	; (188 <Reset_Handler+0x70>)
 13a:	4912      	ldr	r1, [pc, #72]	; (184 <Reset_Handler+0x6c>)
 13c:	588c      	ldr	r4, [r1, r2]
 13e:	5084      	str	r4, [r0, r2]
 140:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 142:	429a      	cmp	r2, r3
 144:	d1fa      	bne.n	13c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 146:	4a13      	ldr	r2, [pc, #76]	; (194 <Reset_Handler+0x7c>)
 148:	4b13      	ldr	r3, [pc, #76]	; (198 <Reset_Handler+0x80>)
 14a:	429a      	cmp	r2, r3
 14c:	d20a      	bcs.n	164 <Reset_Handler+0x4c>
 14e:	43d3      	mvns	r3, r2
 150:	4911      	ldr	r1, [pc, #68]	; (198 <Reset_Handler+0x80>)
 152:	185b      	adds	r3, r3, r1
 154:	2103      	movs	r1, #3
 156:	438b      	bics	r3, r1
 158:	3304      	adds	r3, #4
 15a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 15c:	2100      	movs	r1, #0
 15e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 160:	4293      	cmp	r3, r2
 162:	d1fc      	bne.n	15e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 164:	4a0d      	ldr	r2, [pc, #52]	; (19c <Reset_Handler+0x84>)
 166:	21ff      	movs	r1, #255	; 0xff
 168:	4b0d      	ldr	r3, [pc, #52]	; (1a0 <Reset_Handler+0x88>)
 16a:	438b      	bics	r3, r1
 16c:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
 16e:	4a0d      	ldr	r2, [pc, #52]	; (1a4 <Reset_Handler+0x8c>)
 170:	6853      	ldr	r3, [r2, #4]
 172:	397f      	subs	r1, #127	; 0x7f
 174:	430b      	orrs	r3, r1
 176:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 178:	4b0b      	ldr	r3, [pc, #44]	; (1a8 <Reset_Handler+0x90>)
 17a:	4798      	blx	r3
        main();
 17c:	4b0b      	ldr	r3, [pc, #44]	; (1ac <Reset_Handler+0x94>)
 17e:	4798      	blx	r3
 180:	e7fe      	b.n	180 <Reset_Handler+0x68>
 182:	46c0      	nop			; (mov r8, r8)
 184:	00000394 	.word	0x00000394
 188:	20000000 	.word	0x20000000
 18c:	20000434 	.word	0x20000434
 190:	20000004 	.word	0x20000004
 194:	20000434 	.word	0x20000434
 198:	20000474 	.word	0x20000474
 19c:	e000ed00 	.word	0xe000ed00
 1a0:	00000000 	.word	0x00000000
 1a4:	41004000 	.word	0x41004000
 1a8:	000001cd 	.word	0x000001cd
 1ac:	000001c1 	.word	0x000001c1

000001b0 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
 1b0:	4a01      	ldr	r2, [pc, #4]	; (1b8 <SystemInit+0x8>)
 1b2:	4b02      	ldr	r3, [pc, #8]	; (1bc <SystemInit+0xc>)
 1b4:	601a      	str	r2, [r3, #0]
	return;
}
 1b6:	4770      	bx	lr
 1b8:	003d0900 	.word	0x003d0900
 1bc:	20000000 	.word	0x20000000

000001c0 <main>:

#include "sam.h"


int main(void)
{
 1c0:	b510      	push	{r4, lr}
    /* Initialize the SAM system */
    SystemInit();
 1c2:	4b01      	ldr	r3, [pc, #4]	; (1c8 <main+0x8>)
 1c4:	4798      	blx	r3
 1c6:	e7fe      	b.n	1c6 <main+0x6>
 1c8:	000001b1 	.word	0x000001b1

000001cc <__libc_init_array>:
 1cc:	b570      	push	{r4, r5, r6, lr}
 1ce:	4e0d      	ldr	r6, [pc, #52]	; (204 <__libc_init_array+0x38>)
 1d0:	4d0d      	ldr	r5, [pc, #52]	; (208 <__libc_init_array+0x3c>)
 1d2:	2400      	movs	r4, #0
 1d4:	1bad      	subs	r5, r5, r6
 1d6:	10ad      	asrs	r5, r5, #2
 1d8:	d005      	beq.n	1e6 <__libc_init_array+0x1a>
 1da:	00a3      	lsls	r3, r4, #2
 1dc:	58f3      	ldr	r3, [r6, r3]
 1de:	3401      	adds	r4, #1
 1e0:	4798      	blx	r3
 1e2:	42a5      	cmp	r5, r4
 1e4:	d1f9      	bne.n	1da <__libc_init_array+0xe>
 1e6:	f000 f8c3 	bl	370 <_init>
 1ea:	4e08      	ldr	r6, [pc, #32]	; (20c <__libc_init_array+0x40>)
 1ec:	4d08      	ldr	r5, [pc, #32]	; (210 <__libc_init_array+0x44>)
 1ee:	2400      	movs	r4, #0
 1f0:	1bad      	subs	r5, r5, r6
 1f2:	10ad      	asrs	r5, r5, #2
 1f4:	d005      	beq.n	202 <__libc_init_array+0x36>
 1f6:	00a3      	lsls	r3, r4, #2
 1f8:	58f3      	ldr	r3, [r6, r3]
 1fa:	3401      	adds	r4, #1
 1fc:	4798      	blx	r3
 1fe:	42a5      	cmp	r5, r4
 200:	d1f9      	bne.n	1f6 <__libc_init_array+0x2a>
 202:	bd70      	pop	{r4, r5, r6, pc}
 204:	0000037c 	.word	0x0000037c
 208:	0000037c 	.word	0x0000037c
 20c:	0000037c 	.word	0x0000037c
 210:	00000384 	.word	0x00000384

00000214 <register_fini>:
 214:	4b03      	ldr	r3, [pc, #12]	; (224 <register_fini+0x10>)
 216:	b510      	push	{r4, lr}
 218:	2b00      	cmp	r3, #0
 21a:	d002      	beq.n	222 <register_fini+0xe>
 21c:	4802      	ldr	r0, [pc, #8]	; (228 <register_fini+0x14>)
 21e:	f000 f805 	bl	22c <atexit>
 222:	bd10      	pop	{r4, pc}
 224:	00000000 	.word	0x00000000
 228:	0000023d 	.word	0x0000023d

0000022c <atexit>:
 22c:	b510      	push	{r4, lr}
 22e:	0001      	movs	r1, r0
 230:	2300      	movs	r3, #0
 232:	2200      	movs	r2, #0
 234:	2000      	movs	r0, #0
 236:	f000 f81f 	bl	278 <__register_exitproc>
 23a:	bd10      	pop	{r4, pc}

0000023c <__libc_fini_array>:
 23c:	b570      	push	{r4, r5, r6, lr}
 23e:	4b09      	ldr	r3, [pc, #36]	; (264 <__libc_fini_array+0x28>)
 240:	4c09      	ldr	r4, [pc, #36]	; (268 <__libc_fini_array+0x2c>)
 242:	1ae4      	subs	r4, r4, r3
 244:	10a4      	asrs	r4, r4, #2
 246:	d009      	beq.n	25c <__libc_fini_array+0x20>
 248:	4a08      	ldr	r2, [pc, #32]	; (26c <__libc_fini_array+0x30>)
 24a:	18a5      	adds	r5, r4, r2
 24c:	00ad      	lsls	r5, r5, #2
 24e:	18ed      	adds	r5, r5, r3
 250:	682b      	ldr	r3, [r5, #0]
 252:	3c01      	subs	r4, #1
 254:	4798      	blx	r3
 256:	3d04      	subs	r5, #4
 258:	2c00      	cmp	r4, #0
 25a:	d1f9      	bne.n	250 <__libc_fini_array+0x14>
 25c:	f000 f892 	bl	384 <_fini>
 260:	bd70      	pop	{r4, r5, r6, pc}
 262:	46c0      	nop			; (mov r8, r8)
 264:	00000390 	.word	0x00000390
 268:	00000394 	.word	0x00000394
 26c:	3fffffff 	.word	0x3fffffff

00000270 <__retarget_lock_acquire_recursive>:
 270:	4770      	bx	lr
 272:	46c0      	nop			; (mov r8, r8)

00000274 <__retarget_lock_release_recursive>:
 274:	4770      	bx	lr
 276:	46c0      	nop			; (mov r8, r8)

00000278 <__register_exitproc>:
 278:	b5f0      	push	{r4, r5, r6, r7, lr}
 27a:	464e      	mov	r6, r9
 27c:	4645      	mov	r5, r8
 27e:	46de      	mov	lr, fp
 280:	4657      	mov	r7, sl
 282:	b5e0      	push	{r5, r6, r7, lr}
 284:	4d36      	ldr	r5, [pc, #216]	; (360 <__register_exitproc+0xe8>)
 286:	b083      	sub	sp, #12
 288:	0006      	movs	r6, r0
 28a:	6828      	ldr	r0, [r5, #0]
 28c:	4698      	mov	r8, r3
 28e:	000f      	movs	r7, r1
 290:	4691      	mov	r9, r2
 292:	f7ff ffed 	bl	270 <__retarget_lock_acquire_recursive>
 296:	4b33      	ldr	r3, [pc, #204]	; (364 <__register_exitproc+0xec>)
 298:	681c      	ldr	r4, [r3, #0]
 29a:	23a4      	movs	r3, #164	; 0xa4
 29c:	005b      	lsls	r3, r3, #1
 29e:	58e0      	ldr	r0, [r4, r3]
 2a0:	2800      	cmp	r0, #0
 2a2:	d052      	beq.n	34a <__register_exitproc+0xd2>
 2a4:	6843      	ldr	r3, [r0, #4]
 2a6:	2b1f      	cmp	r3, #31
 2a8:	dc13      	bgt.n	2d2 <__register_exitproc+0x5a>
 2aa:	1c5a      	adds	r2, r3, #1
 2ac:	9201      	str	r2, [sp, #4]
 2ae:	2e00      	cmp	r6, #0
 2b0:	d128      	bne.n	304 <__register_exitproc+0x8c>
 2b2:	9a01      	ldr	r2, [sp, #4]
 2b4:	3302      	adds	r3, #2
 2b6:	009b      	lsls	r3, r3, #2
 2b8:	6042      	str	r2, [r0, #4]
 2ba:	501f      	str	r7, [r3, r0]
 2bc:	6828      	ldr	r0, [r5, #0]
 2be:	f7ff ffd9 	bl	274 <__retarget_lock_release_recursive>
 2c2:	2000      	movs	r0, #0
 2c4:	b003      	add	sp, #12
 2c6:	bc3c      	pop	{r2, r3, r4, r5}
 2c8:	4690      	mov	r8, r2
 2ca:	4699      	mov	r9, r3
 2cc:	46a2      	mov	sl, r4
 2ce:	46ab      	mov	fp, r5
 2d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 2d2:	4b25      	ldr	r3, [pc, #148]	; (368 <__register_exitproc+0xf0>)
 2d4:	2b00      	cmp	r3, #0
 2d6:	d03d      	beq.n	354 <__register_exitproc+0xdc>
 2d8:	20c8      	movs	r0, #200	; 0xc8
 2da:	0040      	lsls	r0, r0, #1
 2dc:	e000      	b.n	2e0 <__register_exitproc+0x68>
 2de:	bf00      	nop
 2e0:	2800      	cmp	r0, #0
 2e2:	d037      	beq.n	354 <__register_exitproc+0xdc>
 2e4:	22a4      	movs	r2, #164	; 0xa4
 2e6:	2300      	movs	r3, #0
 2e8:	0052      	lsls	r2, r2, #1
 2ea:	58a1      	ldr	r1, [r4, r2]
 2ec:	6043      	str	r3, [r0, #4]
 2ee:	6001      	str	r1, [r0, #0]
 2f0:	50a0      	str	r0, [r4, r2]
 2f2:	3240      	adds	r2, #64	; 0x40
 2f4:	5083      	str	r3, [r0, r2]
 2f6:	3204      	adds	r2, #4
 2f8:	5083      	str	r3, [r0, r2]
 2fa:	3301      	adds	r3, #1
 2fc:	9301      	str	r3, [sp, #4]
 2fe:	2300      	movs	r3, #0
 300:	2e00      	cmp	r6, #0
 302:	d0d6      	beq.n	2b2 <__register_exitproc+0x3a>
 304:	009a      	lsls	r2, r3, #2
 306:	4692      	mov	sl, r2
 308:	4482      	add	sl, r0
 30a:	464a      	mov	r2, r9
 30c:	2188      	movs	r1, #136	; 0x88
 30e:	4654      	mov	r4, sl
 310:	5062      	str	r2, [r4, r1]
 312:	22c4      	movs	r2, #196	; 0xc4
 314:	0052      	lsls	r2, r2, #1
 316:	4691      	mov	r9, r2
 318:	4481      	add	r9, r0
 31a:	464a      	mov	r2, r9
 31c:	3987      	subs	r1, #135	; 0x87
 31e:	4099      	lsls	r1, r3
 320:	6812      	ldr	r2, [r2, #0]
 322:	468b      	mov	fp, r1
 324:	430a      	orrs	r2, r1
 326:	4694      	mov	ip, r2
 328:	464a      	mov	r2, r9
 32a:	4661      	mov	r1, ip
 32c:	6011      	str	r1, [r2, #0]
 32e:	2284      	movs	r2, #132	; 0x84
 330:	4641      	mov	r1, r8
 332:	0052      	lsls	r2, r2, #1
 334:	50a1      	str	r1, [r4, r2]
 336:	2e02      	cmp	r6, #2
 338:	d1bb      	bne.n	2b2 <__register_exitproc+0x3a>
 33a:	0002      	movs	r2, r0
 33c:	465c      	mov	r4, fp
 33e:	328d      	adds	r2, #141	; 0x8d
 340:	32ff      	adds	r2, #255	; 0xff
 342:	6811      	ldr	r1, [r2, #0]
 344:	430c      	orrs	r4, r1
 346:	6014      	str	r4, [r2, #0]
 348:	e7b3      	b.n	2b2 <__register_exitproc+0x3a>
 34a:	0020      	movs	r0, r4
 34c:	304d      	adds	r0, #77	; 0x4d
 34e:	30ff      	adds	r0, #255	; 0xff
 350:	50e0      	str	r0, [r4, r3]
 352:	e7a7      	b.n	2a4 <__register_exitproc+0x2c>
 354:	6828      	ldr	r0, [r5, #0]
 356:	f7ff ff8d 	bl	274 <__retarget_lock_release_recursive>
 35a:	2001      	movs	r0, #1
 35c:	4240      	negs	r0, r0
 35e:	e7b1      	b.n	2c4 <__register_exitproc+0x4c>
 360:	20000430 	.word	0x20000430
 364:	0000036c 	.word	0x0000036c
 368:	00000000 	.word	0x00000000

0000036c <_global_impure_ptr>:
 36c:	20000008                                ... 

00000370 <_init>:
 370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 372:	46c0      	nop			; (mov r8, r8)
 374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 376:	bc08      	pop	{r3}
 378:	469e      	mov	lr, r3
 37a:	4770      	bx	lr

0000037c <__init_array_start>:
 37c:	00000215 	.word	0x00000215

00000380 <__frame_dummy_init_array_entry>:
 380:	000000dd                                ....

00000384 <_fini>:
 384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 386:	46c0      	nop			; (mov r8, r8)
 388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 38a:	bc08      	pop	{r3}
 38c:	469e      	mov	lr, r3
 38e:	4770      	bx	lr

00000390 <__fini_array_start>:
 390:	000000b5 	.word	0x000000b5
